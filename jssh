#!/bin/sh
###############################################################
# A convenience wrapper for ssh
# First argument must be the domain
# or one of jssh's native options.
###############################################################

name="jssh"
version="0.0.3"
author="Md. Jahidul Hamid"
source="https://github.com/neurobin/jssh"
bugt="$source/issues"

verinfo="
Name:       $name
Version:    $version
Author:     $author
Source:     $source
Bug report: $bugt
"

help="
########################################################
######################### $name #########################
# Convenience wrapper for ssh
# ######################################################
#
# Usage: jssh [options] domain ssh_commands_or options
# 
# Options:
# 
# -cdw : run cd WorkDir after logging in
# -c   : create config file
# -cl  : create config file link to existing config
# -aw  : add www version too with the same configuration
########################################################
"
configh="
############################# jssh config file ################################
# Property names are case insensitive
# if path doesn't have / at the beginning
# it will be taken relative to /home/user (~)
# '#' doesn't mean a comment. Everything not in the format: 
# Property=value are comments.
# You don't need to delete anything inside this block.
# You can comment out a line safely with a '#' at start, even though it
# has no special meaning in this config file.
###############################################################################
"
export logdir="$HOME/.neurobin/jssh"

printEndHelp(){
#takes the configfile name (without .conf) as 1st argument
#and path as 2nd argument
echo "
    Saved as: $2
    You will call jssh for this configuration like this:
    jssh $1 other_ssh_options_or_args
    'jssh $1' is the native jssh part. All other arguments
    will be forwarded to ssh command. Any jssh native option
    must be passed before $1.
    You can edit the config file to make further changes.
    "

}

createConfigFileLink(){
    while true;do
        echo "Enter existing config file name (without .conf): "
        read conf
        if [ x"$conf" != x ];then
            configfile="$logdir/${conf}.conf"
            if [ -f "$configfile" ];then
                break
            else
                echo "Config file: $configfile doesn't exist"
            fi
        fi
    done
    echo "
    Give an easy and memorable name to your config file, something like example.com.
    Later you will call jssh with this name to login to remote.
    "
    while true;do
        echo "Enter config file (link) name (without .conf): "
        read conf
        if [ x"$conf" != x ];then
            configfile_l="$logdir/${conf}.conf"
            if [ -f "$configfile_l" ];then
                while true;do
                    echo "Overwrite (y/n)?: "
                    read yn
                    case "$yn" in
                        [yY] ) break;;
                        [nN] ) exit 0;;
                    esac
                done
            fi
            ln -sf "$configfile" "$configfile_l" &&
            printEndHelp "$conf" "$configfile_l"
            break
        fi
    done
}

createConfigFile(){
    echo "
    Give an easy and memorable name to your config file, something like example.com.
    Later you will call jssh with this name to login to remote.
    "
    while true;do
        echo "Enter config file name (without .conf): "
        read conf
        if [ x"$conf" != x ];then
            break
        fi
    done
    configfile="$logdir/${conf}.conf"
    if [ -f "$configfile" ];then
        while true;do
            echo "Overwrite (y/n)?: "
            read yn
                case "$yn" in
                    [yY] ) break;;
                    [nN] ) exit 0;;
                esac
        done
    fi
    #put config heding to config file
    echo "$configh" > "$configfile"
    while true;do
        echo "Enter domain/IP: "
        read d1
        if [ x"$d1" != x ];then
            echo "Host=$d1" >> "$configfile"
            break
        fi
    done
    while true;do
        echo "Enter port number: "
        read d2
        if [ x"$d2" != x ];then
            echo "Port=$d2" >> "$configfile"
            break
        fi
    done
    while true;do
        echo "Enter username: "
        read d3
        if [ x"$d3" != x ];then
            echo "User=$d3" >> "$configfile"
            break
        fi
    done
    echo "
    If a working directory is specified, jssh -cdw example.com
    will run cd WorkDir just after logging in.
    "
    echo "Enter working directory: "
    read d4
    if [ x"$d4" != x ];then
        echo "WorkDir=$d4" >> "$configfile"
    else
        echo "Not specifying working directory for now."
    fi
    printEndHelp "$conf" "$configfile"
    if $addw;then
        cp "$configfile" "$logdir/www.${conf}.conf" &&
        echo "
    Additional: $logdir/www.${conf}.conf
    "
    fi
}


mkdir -p  "$logdir"
if [ "x$1" = "x" ];then
  echo "$help"
  exit 1
fi
cdw=false
export addw=false
create_config=false
create_config_link=false
for opt in "$@";do
    case "$opt" in
        -h | --help )
            echo "$help"
            shift
            exit 0
            ;;
        -v | --version )
            echo "$verinfo"
            shift
            exit 0
            ;;
        --cd-work-dir | -cdw )
            cdw=true
            shift
            ;;
        --add-www | -aw )
            export addw=true
            shift
            ;;
        --create-config | -c )
            create_config=true
            shift
            ;;
        --create-config-link | -cl )
            create_config_link=true
            shift
            ;;
        -* )
            echo "E: Invalid native jssh option: $1. Abort."
            shift
            exit 1
            ;;
        * )
            dom="$1"
            shift
            break
            ;;
    esac
done

if $create_config; then
    createConfigFile
    exit 0
fi

if $create_config_link; then
    createConfigFileLink
    exit 0
fi

#dom may not be found try once more
if [ x"$dom" = x ];then
    if [ x"$1" != x ];then
        dom="$1"
        shift
    else
        echo "E: config file or domain name required. Abort."
        exit 1
    fi
fi

configfile="$logdir/${dom}.conf"

if [ ! -f "$configfile" ];then 
  echo "E: Configuration file doesn't exist for $dom: Couldn't find $configfile . Abort."
  exit 1
fi

host="$(sed -n -e 's/^[[:blank:]]*Host[[:blank:]]*=[[:blank:]]*\(.*\)$/\1/pi' "$configfile" |sed -e 's/[[:blank:]]*$//' |head -1)"
port="$(sed -n -e 's/^[[:blank:]]*Port[[:blank:]]*=[[:blank:]]*\(.*\)$/\1/pi' "$configfile" |sed -e 's/[[:blank:]]*$//' |head -1)"
user="$(sed -n -e 's/^[[:blank:]]*User[[:blank:]]*=[[:blank:]]*\(.*\)$/\1/pi' "$configfile" |sed -e 's/[[:blank:]]*$//' |head -1)"
droot="$(sed -n -e 's/^[[:blank:]]*WorkDir[[:blank:]]*=[[:blank:]]*\(.*\)$/\1/pi' "$configfile" |sed -e 's/[[:blank:]]*$//' |head -1)"

if [ "x$host" = "x" ]; then host="$dom"; fi
if [ "x$port" = "x" ]; then echo "E: Port required. Abort.";exit 1; fi
if [ "x$user" = "x" ]; then echo "E: username required. Abort.";exit 1; fi
if [ "x$droot" = "x" ] && $cdw; then echo "E: WorkDir required. Abort.";exit 1; fi

#echo "$host"
#echo "$port"
#echo "$user"
#echo "$droot"

if $cdw;then
    com=${1+"$@"}
    com="cd $droot
    $com"
    ssh -p "$port" "$user@$host" "$com"
else
    ssh -p "$port" "$user@$host" ${1+"$@"}
fi
#if [ ! $? -eq 0 ];then
#    echo "$help"
#fi
